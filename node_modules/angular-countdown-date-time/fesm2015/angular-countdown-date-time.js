import { Injectable, Component, Input, ViewEncapsulation, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularCountdownDateTimeService {
    constructor() { }
}
AngularCountdownDateTimeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AngularCountdownDateTimeService.ctorParameters = () => [];
/** @nocollapse */ AngularCountdownDateTimeService.ngInjectableDef = defineInjectable({ factory: function AngularCountdownDateTimeService_Factory() { return new AngularCountdownDateTimeService(); }, token: AngularCountdownDateTimeService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularCountdownDateTimeComponent {
    constructor() {
        debugger;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        debugger;
        this.endDate = new Date(this.endDateBind);
        setInterval((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let end = this.endDate.toDateString();
            /** @type {?} */
            let start = new Date().toDateString();
            this.diff = Math.floor((this.endDate.getTime() - new Date().getTime()) / 1000);
            this.dayTextBind = this.dayText;
            this.hourTextBind = this.hourText;
            this.minutesTextBind = this.minutesText;
            this.secondsTextBind = this.secondsText;
            this.days = this.getDays(this.diff);
            this.hours = this.getHours(this.diff);
            this.minutes = this.getMinutes(this.diff);
            this.seconds = this.getSeconds(this.diff);
        }), 1000);
    }
    /**
     * @param {?} t
     * @return {?}
     */
    getDays(t) {
        /** @type {?} */
        let days;
        days = Math.floor(t / 86400);
        return ('0' + days).slice(-2);
    }
    /**
     * @param {?} t
     * @return {?}
     */
    getHours(t) {
        /** @type {?} */
        let days;
        /** @type {?} */
        let hours;
        days = Math.floor(t / 86400);
        t -= days * 86400;
        hours = Math.floor(t / 3600) % 24;
        return ('0' + hours).slice(-2);
    }
    /**
     * @param {?} t
     * @return {?}
     */
    getMinutes(t) {
        /** @type {?} */
        let days;
        /** @type {?} */
        let hours;
        /** @type {?} */
        let minutes;
        days = Math.floor(t / 86400);
        t -= days * 86400;
        hours = Math.floor(t / 3600) % 24;
        t -= hours * 3600;
        minutes = Math.floor(t / 60) % 60;
        return ('0' + minutes).slice(-2);
    }
    /**
     * @param {?} t
     * @return {?}
     */
    getSeconds(t) {
        /** @type {?} */
        let days;
        /** @type {?} */
        let hours;
        /** @type {?} */
        let minutes;
        /** @type {?} */
        let seconds;
        days = Math.floor(t / 86400);
        t -= days * 86400;
        hours = Math.floor(t / 3600) % 24;
        t -= hours * 3600;
        minutes = Math.floor(t / 60) % 60;
        t -= minutes * 60;
        seconds = t % 60;
        return ('0' + seconds).slice(-2);
    }
}
AngularCountdownDateTimeComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-angular-countdown-dateTime',
                template: "<div class=\"count-down\">\r\n  <div class=\"count-down-row\">\r\n    <div>\r\n      <span>\r\n        {{days}}\r\n      </span>\r\n    </div>\r\n    <div>\r\n      <span>\r\n        {{hours}}\r\n      </span>\r\n    </div>\r\n    <div>\r\n      <span>\r\n        {{minutes}}\r\n      </span>\r\n    </div>\r\n    <div>\r\n      <span>\r\n        {{seconds}}\r\n      </span>\r\n    </div>\r\n  </div>\r\n  <div class=\"count-down-row\">\r\n    <div>\r\n      {{dayTextBind}}\r\n    </div>\r\n    <div>\r\n      {{hourTextBind}}\r\n    </div>\r\n    <div>\r\n      {{minutesTextBind}}\r\n    </div>\r\n    <div>\r\n      {{secondsTextBind}}\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".count-down{background:#fff;border:0 solid #dadada;border-radius:4.48px;position:relative;width:100%;padding:20px 0 10px}.count-down .count-down-row{display:flex;flex-direction:row;justify-content:center;align-items:center;text-align:center}.count-down .count-down-row>div{flex-grow:1;padding-bottom:10px;width:25%}.count-down span{letter-spacing:0;font-size:1.5em;color:#616161;text-align:center;font-weight:500}"]
            }] }
];
/** @nocollapse */
AngularCountdownDateTimeComponent.ctorParameters = () => [];
AngularCountdownDateTimeComponent.propDecorators = {
    endDateBind: [{ type: Input }],
    dayText: [{ type: Input }],
    hourText: [{ type: Input }],
    minutesText: [{ type: Input }],
    secondsText: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularCountdownDateTimeModule {
}
AngularCountdownDateTimeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [AngularCountdownDateTimeComponent],
                imports: [],
                exports: [AngularCountdownDateTimeComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularCountdownDateTimeService, AngularCountdownDateTimeComponent, AngularCountdownDateTimeModule };

//# sourceMappingURL=angular-countdown-date-time.js.map